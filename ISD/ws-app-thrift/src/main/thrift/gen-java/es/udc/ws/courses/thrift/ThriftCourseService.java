/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package es.udc.ws.courses.thrift;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-12-26")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ThriftCourseService {

  public interface Iface {

    public ThriftCourseDto addCourse(ThriftCourseDto course) throws ThriftInputValidationException, org.apache.thrift.TException;

    public java.util.List<ThriftCourseDto> findCourses(java.lang.String city) throws ThriftInputValidationException, org.apache.thrift.TException;

    public ThriftCourseDto findCourse(long courseId) throws ThriftInstanceNotFoundException, ThriftInputValidationException, org.apache.thrift.TException;

    public ThriftInscriptionDto joinCourse(java.lang.String userEmail, long courseId, java.lang.String creditCardNumber) throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftNotEnoughPlacesException, ThriftCourseAlreadyJoinedException, ThriftCourseAlreadyStartedException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addCourse(ThriftCourseDto course, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException;

    public void findCourses(java.lang.String city, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCourseDto>> resultHandler) throws org.apache.thrift.TException;

    public void findCourse(long courseId, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException;

    public void joinCourse(java.lang.String userEmail, long courseId, java.lang.String creditCardNumber, org.apache.thrift.async.AsyncMethodCallback<ThriftInscriptionDto> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public ThriftCourseDto addCourse(ThriftCourseDto course) throws ThriftInputValidationException, org.apache.thrift.TException
    {
      send_addCourse(course);
      return recv_addCourse();
    }

    public void send_addCourse(ThriftCourseDto course) throws org.apache.thrift.TException
    {
      addCourse_args args = new addCourse_args();
      args.setCourse(course);
      sendBase("addCourse", args);
    }

    public ThriftCourseDto recv_addCourse() throws ThriftInputValidationException, org.apache.thrift.TException
    {
      addCourse_result result = new addCourse_result();
      receiveBase(result, "addCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCourse failed: unknown result");
    }

    @Override
    public java.util.List<ThriftCourseDto> findCourses(java.lang.String city) throws ThriftInputValidationException, org.apache.thrift.TException
    {
      send_findCourses(city);
      return recv_findCourses();
    }

    public void send_findCourses(java.lang.String city) throws org.apache.thrift.TException
    {
      findCourses_args args = new findCourses_args();
      args.setCity(city);
      sendBase("findCourses", args);
    }

    public java.util.List<ThriftCourseDto> recv_findCourses() throws ThriftInputValidationException, org.apache.thrift.TException
    {
      findCourses_result result = new findCourses_result();
      receiveBase(result, "findCourses");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCourses failed: unknown result");
    }

    @Override
    public ThriftCourseDto findCourse(long courseId) throws ThriftInstanceNotFoundException, ThriftInputValidationException, org.apache.thrift.TException
    {
      send_findCourse(courseId);
      return recv_findCourse();
    }

    public void send_findCourse(long courseId) throws org.apache.thrift.TException
    {
      findCourse_args args = new findCourse_args();
      args.setCourseId(courseId);
      sendBase("findCourse", args);
    }

    public ThriftCourseDto recv_findCourse() throws ThriftInstanceNotFoundException, ThriftInputValidationException, org.apache.thrift.TException
    {
      findCourse_result result = new findCourse_result();
      receiveBase(result, "findCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      if (result.ee != null) {
        throw result.ee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCourse failed: unknown result");
    }

    @Override
    public ThriftInscriptionDto joinCourse(java.lang.String userEmail, long courseId, java.lang.String creditCardNumber) throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftNotEnoughPlacesException, ThriftCourseAlreadyJoinedException, ThriftCourseAlreadyStartedException, org.apache.thrift.TException
    {
      send_joinCourse(userEmail, courseId, creditCardNumber);
      return recv_joinCourse();
    }

    public void send_joinCourse(java.lang.String userEmail, long courseId, java.lang.String creditCardNumber) throws org.apache.thrift.TException
    {
      joinCourse_args args = new joinCourse_args();
      args.setUserEmail(userEmail);
      args.setCourseId(courseId);
      args.setCreditCardNumber(creditCardNumber);
      sendBase("joinCourse", args);
    }

    public ThriftInscriptionDto recv_joinCourse() throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftNotEnoughPlacesException, ThriftCourseAlreadyJoinedException, ThriftCourseAlreadyStartedException, org.apache.thrift.TException
    {
      joinCourse_result result = new joinCourse_result();
      receiveBase(result, "joinCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      if (result.ee != null) {
        throw result.ee;
      }
      if (result.eee != null) {
        throw result.eee;
      }
      if (result.eeee != null) {
        throw result.eeee;
      }
      if (result.eeeee != null) {
        throw result.eeeee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "joinCourse failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void addCourse(ThriftCourseDto course, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCourse_call method_call = new addCourse_call(course, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCourse_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftCourseDto> {
      private ThriftCourseDto course;
      public addCourse_call(ThriftCourseDto course, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.course = course;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCourse_args args = new addCourse_args();
        args.setCourse(course);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public ThriftCourseDto getResult() throws ThriftInputValidationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCourse();
      }
    }

    @Override
    public void findCourses(java.lang.String city, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCourseDto>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCourses_call method_call = new findCourses_call(city, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCourses_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ThriftCourseDto>> {
      private java.lang.String city;
      public findCourses_call(java.lang.String city, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCourseDto>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.city = city;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCourses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCourses_args args = new findCourses_args();
        args.setCity(city);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<ThriftCourseDto> getResult() throws ThriftInputValidationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCourses();
      }
    }

    @Override
    public void findCourse(long courseId, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCourse_call method_call = new findCourse_call(courseId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCourse_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftCourseDto> {
      private long courseId;
      public findCourse_call(long courseId, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseId = courseId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCourse_args args = new findCourse_args();
        args.setCourseId(courseId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public ThriftCourseDto getResult() throws ThriftInstanceNotFoundException, ThriftInputValidationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCourse();
      }
    }

    @Override
    public void joinCourse(java.lang.String userEmail, long courseId, java.lang.String creditCardNumber, org.apache.thrift.async.AsyncMethodCallback<ThriftInscriptionDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      joinCourse_call method_call = new joinCourse_call(userEmail, courseId, creditCardNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class joinCourse_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftInscriptionDto> {
      private java.lang.String userEmail;
      private long courseId;
      private java.lang.String creditCardNumber;
      public joinCourse_call(java.lang.String userEmail, long courseId, java.lang.String creditCardNumber, org.apache.thrift.async.AsyncMethodCallback<ThriftInscriptionDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userEmail = userEmail;
        this.courseId = courseId;
        this.creditCardNumber = creditCardNumber;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("joinCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        joinCourse_args args = new joinCourse_args();
        args.setUserEmail(userEmail);
        args.setCourseId(courseId);
        args.setCreditCardNumber(creditCardNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public ThriftInscriptionDto getResult() throws ThriftInputValidationException, ThriftInstanceNotFoundException, ThriftNotEnoughPlacesException, ThriftCourseAlreadyJoinedException, ThriftCourseAlreadyStartedException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_joinCourse();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addCourse", new addCourse());
      processMap.put("findCourses", new findCourses());
      processMap.put("findCourse", new findCourse());
      processMap.put("joinCourse", new joinCourse());
      return processMap;
    }

    public static class addCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCourse_args> {
      public addCourse() {
        super("addCourse");
      }

      @Override
      public addCourse_args getEmptyArgsInstance() {
        return new addCourse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public addCourse_result getResult(I iface, addCourse_args args) throws org.apache.thrift.TException {
        addCourse_result result = new addCourse_result();
        try {
          result.success = iface.addCourse(args.course);
        } catch (ThriftInputValidationException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findCourses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCourses_args> {
      public findCourses() {
        super("findCourses");
      }

      @Override
      public findCourses_args getEmptyArgsInstance() {
        return new findCourses_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public findCourses_result getResult(I iface, findCourses_args args) throws org.apache.thrift.TException {
        findCourses_result result = new findCourses_result();
        try {
          result.success = iface.findCourses(args.city);
        } catch (ThriftInputValidationException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCourse_args> {
      public findCourse() {
        super("findCourse");
      }

      @Override
      public findCourse_args getEmptyArgsInstance() {
        return new findCourse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public findCourse_result getResult(I iface, findCourse_args args) throws org.apache.thrift.TException {
        findCourse_result result = new findCourse_result();
        try {
          result.success = iface.findCourse(args.courseId);
        } catch (ThriftInstanceNotFoundException e) {
          result.e = e;
        } catch (ThriftInputValidationException ee) {
          result.ee = ee;
        }
        return result;
      }
    }

    public static class joinCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, joinCourse_args> {
      public joinCourse() {
        super("joinCourse");
      }

      @Override
      public joinCourse_args getEmptyArgsInstance() {
        return new joinCourse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public joinCourse_result getResult(I iface, joinCourse_args args) throws org.apache.thrift.TException {
        joinCourse_result result = new joinCourse_result();
        try {
          result.success = iface.joinCourse(args.userEmail, args.courseId, args.creditCardNumber);
        } catch (ThriftInputValidationException e) {
          result.e = e;
        } catch (ThriftInstanceNotFoundException ee) {
          result.ee = ee;
        } catch (ThriftNotEnoughPlacesException eee) {
          result.eee = eee;
        } catch (ThriftCourseAlreadyJoinedException eeee) {
          result.eeee = eeee;
        } catch (ThriftCourseAlreadyStartedException eeeee) {
          result.eeeee = eeeee;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addCourse", new addCourse());
      processMap.put("findCourses", new findCourses());
      processMap.put("findCourse", new findCourse());
      processMap.put("joinCourse", new joinCourse());
      return processMap;
    }

    public static class addCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCourse_args, ThriftCourseDto> {
      public addCourse() {
        super("addCourse");
      }

      @Override
      public addCourse_args getEmptyArgsInstance() {
        return new addCourse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto>() { 
          @Override
          public void onComplete(ThriftCourseDto o) {
            addCourse_result result = new addCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addCourse_result result = new addCourse_result();
            if (e instanceof ThriftInputValidationException) {
              result.e = (ThriftInputValidationException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, addCourse_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException {
        iface.addCourse(args.course,resultHandler);
      }
    }

    public static class findCourses<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCourses_args, java.util.List<ThriftCourseDto>> {
      public findCourses() {
        super("findCourses");
      }

      @Override
      public findCourses_args getEmptyArgsInstance() {
        return new findCourses_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCourseDto>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCourseDto>>() { 
          @Override
          public void onComplete(java.util.List<ThriftCourseDto> o) {
            findCourses_result result = new findCourses_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findCourses_result result = new findCourses_result();
            if (e instanceof ThriftInputValidationException) {
              result.e = (ThriftInputValidationException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, findCourses_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftCourseDto>> resultHandler) throws org.apache.thrift.TException {
        iface.findCourses(args.city,resultHandler);
      }
    }

    public static class findCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCourse_args, ThriftCourseDto> {
      public findCourse() {
        super("findCourse");
      }

      @Override
      public findCourse_args getEmptyArgsInstance() {
        return new findCourse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto>() { 
          @Override
          public void onComplete(ThriftCourseDto o) {
            findCourse_result result = new findCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findCourse_result result = new findCourse_result();
            if (e instanceof ThriftInstanceNotFoundException) {
              result.e = (ThriftInstanceNotFoundException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof ThriftInputValidationException) {
              result.ee = (ThriftInputValidationException) e;
              result.setEeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, findCourse_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException {
        iface.findCourse(args.courseId,resultHandler);
      }
    }

    public static class joinCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, joinCourse_args, ThriftInscriptionDto> {
      public joinCourse() {
        super("joinCourse");
      }

      @Override
      public joinCourse_args getEmptyArgsInstance() {
        return new joinCourse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<ThriftInscriptionDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ThriftInscriptionDto>() { 
          @Override
          public void onComplete(ThriftInscriptionDto o) {
            joinCourse_result result = new joinCourse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            joinCourse_result result = new joinCourse_result();
            if (e instanceof ThriftInputValidationException) {
              result.e = (ThriftInputValidationException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof ThriftInstanceNotFoundException) {
              result.ee = (ThriftInstanceNotFoundException) e;
              result.setEeIsSet(true);
              msg = result;
            } else if (e instanceof ThriftNotEnoughPlacesException) {
              result.eee = (ThriftNotEnoughPlacesException) e;
              result.setEeeIsSet(true);
              msg = result;
            } else if (e instanceof ThriftCourseAlreadyJoinedException) {
              result.eeee = (ThriftCourseAlreadyJoinedException) e;
              result.setEeeeIsSet(true);
              msg = result;
            } else if (e instanceof ThriftCourseAlreadyStartedException) {
              result.eeeee = (ThriftCourseAlreadyStartedException) e;
              result.setEeeeeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, joinCourse_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftInscriptionDto> resultHandler) throws org.apache.thrift.TException {
        iface.joinCourse(args.userEmail, args.courseId, args.creditCardNumber,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class addCourse_args implements org.apache.thrift.TBase<addCourse_args, addCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_FIELD_DESC = new org.apache.thrift.protocol.TField("course", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCourse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCourse_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftCourseDto course; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE((short)1, "course");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE
            return COURSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE, new org.apache.thrift.meta_data.FieldMetaData("course", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCourseDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCourse_args.class, metaDataMap);
    }

    public addCourse_args() {
    }

    public addCourse_args(
      ThriftCourseDto course)
    {
      this();
      this.course = course;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCourse_args(addCourse_args other) {
      if (other.isSetCourse()) {
        this.course = new ThriftCourseDto(other.course);
      }
    }

    @Override
    public addCourse_args deepCopy() {
      return new addCourse_args(this);
    }

    @Override
    public void clear() {
      this.course = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftCourseDto getCourse() {
      return this.course;
    }

    public addCourse_args setCourse(@org.apache.thrift.annotation.Nullable ThriftCourseDto course) {
      this.course = course;
      return this;
    }

    public void unsetCourse() {
      this.course = null;
    }

    /** Returns true if field course is set (has been assigned a value) and false otherwise */
    public boolean isSetCourse() {
      return this.course != null;
    }

    public void setCourseIsSet(boolean value) {
      if (!value) {
        this.course = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COURSE:
        if (value == null) {
          unsetCourse();
        } else {
          setCourse((ThriftCourseDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE:
        return getCourse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COURSE:
        return isSetCourse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addCourse_args)
        return this.equals((addCourse_args)that);
      return false;
    }

    public boolean equals(addCourse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_course = true && this.isSetCourse();
      boolean that_present_course = true && that.isSetCourse();
      if (this_present_course || that_present_course) {
        if (!(this_present_course && that_present_course))
          return false;
        if (!this.course.equals(that.course))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCourse()) ? 131071 : 524287);
      if (isSetCourse())
        hashCode = hashCode * 8191 + course.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCourse(), other.isSetCourse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.course, other.course);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addCourse_args(");
      boolean first = true;

      sb.append("course:");
      if (this.course == null) {
        sb.append("null");
      } else {
        sb.append(this.course);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (course != null) {
        course.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCourse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addCourse_argsStandardScheme getScheme() {
        return new addCourse_argsStandardScheme();
      }
    }

    private static class addCourse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCourse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, addCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.course = new ThriftCourseDto();
                struct.course.read(iprot);
                struct.setCourseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, addCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.course != null) {
          oprot.writeFieldBegin(COURSE_FIELD_DESC);
          struct.course.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCourse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addCourse_argsTupleScheme getScheme() {
        return new addCourse_argsTupleScheme();
      }
    }

    private static class addCourse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCourse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCourse()) {
          struct.course.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.course = new ThriftCourseDto();
          struct.course.read(iprot);
          struct.setCourseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class addCourse_result implements org.apache.thrift.TBase<addCourse_result, addCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCourse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCourse_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftCourseDto success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInputValidationException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)-1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCourseDto.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInputValidationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCourse_result.class, metaDataMap);
    }

    public addCourse_result() {
    }

    public addCourse_result(
      ThriftCourseDto success,
      ThriftInputValidationException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCourse_result(addCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftCourseDto(other.success);
      }
      if (other.isSetE()) {
        this.e = new ThriftInputValidationException(other.e);
      }
    }

    @Override
    public addCourse_result deepCopy() {
      return new addCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftCourseDto getSuccess() {
      return this.success;
    }

    public addCourse_result setSuccess(@org.apache.thrift.annotation.Nullable ThriftCourseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInputValidationException getE() {
      return this.e;
    }

    public addCourse_result setE(@org.apache.thrift.annotation.Nullable ThriftInputValidationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftCourseDto)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInputValidationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addCourse_result)
        return this.equals((addCourse_result)that);
      return false;
    }

    public boolean equals(addCourse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCourse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addCourse_resultStandardScheme getScheme() {
        return new addCourse_resultStandardScheme();
      }
    }

    private static class addCourse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCourse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, addCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftCourseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInputValidationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, addCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCourse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addCourse_resultTupleScheme getScheme() {
        return new addCourse_resultTupleScheme();
      }
    }

    private static class addCourse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ThriftCourseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInputValidationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findCourses_args implements org.apache.thrift.TBase<findCourses_args, findCourses_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCourses_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCourses_args");

    private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCourses_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCourses_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String city; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CITY((short)1, "city");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CITY
            return CITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCourses_args.class, metaDataMap);
    }

    public findCourses_args() {
    }

    public findCourses_args(
      java.lang.String city)
    {
      this();
      this.city = city;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCourses_args(findCourses_args other) {
      if (other.isSetCity()) {
        this.city = other.city;
      }
    }

    @Override
    public findCourses_args deepCopy() {
      return new findCourses_args(this);
    }

    @Override
    public void clear() {
      this.city = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCity() {
      return this.city;
    }

    public findCourses_args setCity(@org.apache.thrift.annotation.Nullable java.lang.String city) {
      this.city = city;
      return this;
    }

    public void unsetCity() {
      this.city = null;
    }

    /** Returns true if field city is set (has been assigned a value) and false otherwise */
    public boolean isSetCity() {
      return this.city != null;
    }

    public void setCityIsSet(boolean value) {
      if (!value) {
        this.city = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CITY:
        if (value == null) {
          unsetCity();
        } else {
          setCity((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CITY:
        return getCity();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CITY:
        return isSetCity();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findCourses_args)
        return this.equals((findCourses_args)that);
      return false;
    }

    public boolean equals(findCourses_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_city = true && this.isSetCity();
      boolean that_present_city = true && that.isSetCity();
      if (this_present_city || that_present_city) {
        if (!(this_present_city && that_present_city))
          return false;
        if (!this.city.equals(that.city))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
      if (isSetCity())
        hashCode = hashCode * 8191 + city.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findCourses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCity(), other.isSetCity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCourses_args(");
      boolean first = true;

      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCourses_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourses_argsStandardScheme getScheme() {
        return new findCourses_argsStandardScheme();
      }
    }

    private static class findCourses_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCourses_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findCourses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.city = iprot.readString();
                struct.setCityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findCourses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.city != null) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCourses_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourses_argsTupleScheme getScheme() {
        return new findCourses_argsTupleScheme();
      }
    }

    private static class findCourses_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCourses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCourses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCity()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCity()) {
          oprot.writeString(struct.city);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCourses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.city = iprot.readString();
          struct.setCityIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findCourses_result implements org.apache.thrift.TBase<findCourses_result, findCourses_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCourses_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCourses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCourses_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCourses_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ThriftCourseDto> success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInputValidationException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)-1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case -1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCourseDto.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInputValidationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCourses_result.class, metaDataMap);
    }

    public findCourses_result() {
    }

    public findCourses_result(
      java.util.List<ThriftCourseDto> success,
      ThriftInputValidationException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCourses_result(findCourses_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ThriftCourseDto> __this__success = new java.util.ArrayList<ThriftCourseDto>(other.success.size());
        for (ThriftCourseDto other_element : other.success) {
          __this__success.add(new ThriftCourseDto(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ThriftInputValidationException(other.e);
      }
    }

    @Override
    public findCourses_result deepCopy() {
      return new findCourses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ThriftCourseDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftCourseDto elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ThriftCourseDto>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ThriftCourseDto> getSuccess() {
      return this.success;
    }

    public findCourses_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ThriftCourseDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInputValidationException getE() {
      return this.e;
    }

    public findCourses_result setE(@org.apache.thrift.annotation.Nullable ThriftInputValidationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ThriftCourseDto>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInputValidationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findCourses_result)
        return this.equals((findCourses_result)that);
      return false;
    }

    public boolean equals(findCourses_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findCourses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCourses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCourses_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourses_resultStandardScheme getScheme() {
        return new findCourses_resultStandardScheme();
      }
    }

    private static class findCourses_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCourses_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findCourses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ThriftCourseDto>(_list0.size);
                  @org.apache.thrift.annotation.Nullable ThriftCourseDto _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ThriftCourseDto();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case -1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInputValidationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findCourses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftCourseDto _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCourses_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourses_resultTupleScheme getScheme() {
        return new findCourses_resultTupleScheme();
      }
    }

    private static class findCourses_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCourses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCourses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftCourseDto _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCourses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<ThriftCourseDto>(_list5.size);
            @org.apache.thrift.annotation.Nullable ThriftCourseDto _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new ThriftCourseDto();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInputValidationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findCourse_args implements org.apache.thrift.TBase<findCourse_args, findCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCourse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCourse_argsTupleSchemeFactory();

    public long courseId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_ID((short)1, "courseId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_ID
            return COURSE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COURSEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCourse_args.class, metaDataMap);
    }

    public findCourse_args() {
    }

    public findCourse_args(
      long courseId)
    {
      this();
      this.courseId = courseId;
      setCourseIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCourse_args(findCourse_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.courseId = other.courseId;
    }

    @Override
    public findCourse_args deepCopy() {
      return new findCourse_args(this);
    }

    @Override
    public void clear() {
      setCourseIdIsSet(false);
      this.courseId = 0;
    }

    public long getCourseId() {
      return this.courseId;
    }

    public findCourse_args setCourseId(long courseId) {
      this.courseId = courseId;
      setCourseIdIsSet(true);
      return this;
    }

    public void unsetCourseId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COURSEID_ISSET_ID);
    }

    /** Returns true if field courseId is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COURSEID_ISSET_ID);
    }

    public void setCourseIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COURSEID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COURSE_ID:
        if (value == null) {
          unsetCourseId();
        } else {
          setCourseId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_ID:
        return getCourseId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COURSE_ID:
        return isSetCourseId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findCourse_args)
        return this.equals((findCourse_args)that);
      return false;
    }

    public boolean equals(findCourse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_courseId = true;
      boolean that_present_courseId = true;
      if (this_present_courseId || that_present_courseId) {
        if (!(this_present_courseId && that_present_courseId))
          return false;
        if (this.courseId != that.courseId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(courseId);

      return hashCode;
    }

    @Override
    public int compareTo(findCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCourseId(), other.isSetCourseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseId, other.courseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCourse_args(");
      boolean first = true;

      sb.append("courseId:");
      sb.append(this.courseId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCourse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourse_argsStandardScheme getScheme() {
        return new findCourse_argsStandardScheme();
      }
    }

    private static class findCourse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCourse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.courseId = iprot.readI64();
                struct.setCourseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COURSE_ID_FIELD_DESC);
        oprot.writeI64(struct.courseId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCourse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourse_argsTupleScheme getScheme() {
        return new findCourse_argsTupleScheme();
      }
    }

    private static class findCourse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCourseId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCourseId()) {
          oprot.writeI64(struct.courseId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.courseId = iprot.readI64();
          struct.setCourseIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findCourse_result implements org.apache.thrift.TBase<findCourse_result, findCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EE_FIELD_DESC = new org.apache.thrift.protocol.TField("ee", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCourse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCourse_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftCourseDto success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException e; // required
    public @org.apache.thrift.annotation.Nullable ThriftInputValidationException ee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e"),
      EE((short)2, "ee");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          case 2: // EE
            return EE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCourseDto.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInstanceNotFoundException.class)));
      tmpMap.put(_Fields.EE, new org.apache.thrift.meta_data.FieldMetaData("ee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInputValidationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCourse_result.class, metaDataMap);
    }

    public findCourse_result() {
    }

    public findCourse_result(
      ThriftCourseDto success,
      ThriftInstanceNotFoundException e,
      ThriftInputValidationException ee)
    {
      this();
      this.success = success;
      this.e = e;
      this.ee = ee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCourse_result(findCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftCourseDto(other.success);
      }
      if (other.isSetE()) {
        this.e = new ThriftInstanceNotFoundException(other.e);
      }
      if (other.isSetEe()) {
        this.ee = new ThriftInputValidationException(other.ee);
      }
    }

    @Override
    public findCourse_result deepCopy() {
      return new findCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
      this.ee = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftCourseDto getSuccess() {
      return this.success;
    }

    public findCourse_result setSuccess(@org.apache.thrift.annotation.Nullable ThriftCourseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInstanceNotFoundException getE() {
      return this.e;
    }

    public findCourse_result setE(@org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInputValidationException getEe() {
      return this.ee;
    }

    public findCourse_result setEe(@org.apache.thrift.annotation.Nullable ThriftInputValidationException ee) {
      this.ee = ee;
      return this;
    }

    public void unsetEe() {
      this.ee = null;
    }

    /** Returns true if field ee is set (has been assigned a value) and false otherwise */
    public boolean isSetEe() {
      return this.ee != null;
    }

    public void setEeIsSet(boolean value) {
      if (!value) {
        this.ee = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftCourseDto)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInstanceNotFoundException)value);
        }
        break;

      case EE:
        if (value == null) {
          unsetEe();
        } else {
          setEe((ThriftInputValidationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      case EE:
        return getEe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      case EE:
        return isSetEe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findCourse_result)
        return this.equals((findCourse_result)that);
      return false;
    }

    public boolean equals(findCourse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_ee = true && this.isSetEe();
      boolean that_present_ee = true && that.isSetEe();
      if (this_present_ee || that_present_ee) {
        if (!(this_present_ee && that_present_ee))
          return false;
        if (!this.ee.equals(that.ee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      hashCode = hashCode * 8191 + ((isSetEe()) ? 131071 : 524287);
      if (isSetEe())
        hashCode = hashCode * 8191 + ee.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEe(), other.isSetEe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ee, other.ee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ee:");
      if (this.ee == null) {
        sb.append("null");
      } else {
        sb.append(this.ee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCourse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourse_resultStandardScheme getScheme() {
        return new findCourse_resultStandardScheme();
      }
    }

    private static class findCourse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCourse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftCourseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInstanceNotFoundException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ee = new ThriftInputValidationException();
                struct.ee.read(iprot);
                struct.setEeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ee != null) {
          oprot.writeFieldBegin(EE_FIELD_DESC);
          struct.ee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCourse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourse_resultTupleScheme getScheme() {
        return new findCourse_resultTupleScheme();
      }
    }

    private static class findCourse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        if (struct.isSetEe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
        if (struct.isSetEe()) {
          struct.ee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ThriftCourseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInstanceNotFoundException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ee = new ThriftInputValidationException();
          struct.ee.read(iprot);
          struct.setEeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class joinCourse_args implements org.apache.thrift.TBase<joinCourse_args, joinCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<joinCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinCourse_args");

    private static final org.apache.thrift.protocol.TField USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("userEmail", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COURSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CREDIT_CARD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("creditCardNumber", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinCourse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinCourse_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String userEmail; // required
    public long courseId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String creditCardNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_EMAIL((short)1, "userEmail"),
      COURSE_ID((short)2, "courseId"),
      CREDIT_CARD_NUMBER((short)3, "creditCardNumber");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_EMAIL
            return USER_EMAIL;
          case 2: // COURSE_ID
            return COURSE_ID;
          case 3: // CREDIT_CARD_NUMBER
            return CREDIT_CARD_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COURSEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("userEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COURSE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CREDIT_CARD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("creditCardNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinCourse_args.class, metaDataMap);
    }

    public joinCourse_args() {
    }

    public joinCourse_args(
      java.lang.String userEmail,
      long courseId,
      java.lang.String creditCardNumber)
    {
      this();
      this.userEmail = userEmail;
      this.courseId = courseId;
      setCourseIdIsSet(true);
      this.creditCardNumber = creditCardNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinCourse_args(joinCourse_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserEmail()) {
        this.userEmail = other.userEmail;
      }
      this.courseId = other.courseId;
      if (other.isSetCreditCardNumber()) {
        this.creditCardNumber = other.creditCardNumber;
      }
    }

    @Override
    public joinCourse_args deepCopy() {
      return new joinCourse_args(this);
    }

    @Override
    public void clear() {
      this.userEmail = null;
      setCourseIdIsSet(false);
      this.courseId = 0;
      this.creditCardNumber = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUserEmail() {
      return this.userEmail;
    }

    public joinCourse_args setUserEmail(@org.apache.thrift.annotation.Nullable java.lang.String userEmail) {
      this.userEmail = userEmail;
      return this;
    }

    public void unsetUserEmail() {
      this.userEmail = null;
    }

    /** Returns true if field userEmail is set (has been assigned a value) and false otherwise */
    public boolean isSetUserEmail() {
      return this.userEmail != null;
    }

    public void setUserEmailIsSet(boolean value) {
      if (!value) {
        this.userEmail = null;
      }
    }

    public long getCourseId() {
      return this.courseId;
    }

    public joinCourse_args setCourseId(long courseId) {
      this.courseId = courseId;
      setCourseIdIsSet(true);
      return this;
    }

    public void unsetCourseId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COURSEID_ISSET_ID);
    }

    /** Returns true if field courseId is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COURSEID_ISSET_ID);
    }

    public void setCourseIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COURSEID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCreditCardNumber() {
      return this.creditCardNumber;
    }

    public joinCourse_args setCreditCardNumber(@org.apache.thrift.annotation.Nullable java.lang.String creditCardNumber) {
      this.creditCardNumber = creditCardNumber;
      return this;
    }

    public void unsetCreditCardNumber() {
      this.creditCardNumber = null;
    }

    /** Returns true if field creditCardNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetCreditCardNumber() {
      return this.creditCardNumber != null;
    }

    public void setCreditCardNumberIsSet(boolean value) {
      if (!value) {
        this.creditCardNumber = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case USER_EMAIL:
        if (value == null) {
          unsetUserEmail();
        } else {
          setUserEmail((java.lang.String)value);
        }
        break;

      case COURSE_ID:
        if (value == null) {
          unsetCourseId();
        } else {
          setCourseId((java.lang.Long)value);
        }
        break;

      case CREDIT_CARD_NUMBER:
        if (value == null) {
          unsetCreditCardNumber();
        } else {
          setCreditCardNumber((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_EMAIL:
        return getUserEmail();

      case COURSE_ID:
        return getCourseId();

      case CREDIT_CARD_NUMBER:
        return getCreditCardNumber();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_EMAIL:
        return isSetUserEmail();
      case COURSE_ID:
        return isSetCourseId();
      case CREDIT_CARD_NUMBER:
        return isSetCreditCardNumber();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof joinCourse_args)
        return this.equals((joinCourse_args)that);
      return false;
    }

    public boolean equals(joinCourse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userEmail = true && this.isSetUserEmail();
      boolean that_present_userEmail = true && that.isSetUserEmail();
      if (this_present_userEmail || that_present_userEmail) {
        if (!(this_present_userEmail && that_present_userEmail))
          return false;
        if (!this.userEmail.equals(that.userEmail))
          return false;
      }

      boolean this_present_courseId = true;
      boolean that_present_courseId = true;
      if (this_present_courseId || that_present_courseId) {
        if (!(this_present_courseId && that_present_courseId))
          return false;
        if (this.courseId != that.courseId)
          return false;
      }

      boolean this_present_creditCardNumber = true && this.isSetCreditCardNumber();
      boolean that_present_creditCardNumber = true && that.isSetCreditCardNumber();
      if (this_present_creditCardNumber || that_present_creditCardNumber) {
        if (!(this_present_creditCardNumber && that_present_creditCardNumber))
          return false;
        if (!this.creditCardNumber.equals(that.creditCardNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserEmail()) ? 131071 : 524287);
      if (isSetUserEmail())
        hashCode = hashCode * 8191 + userEmail.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(courseId);

      hashCode = hashCode * 8191 + ((isSetCreditCardNumber()) ? 131071 : 524287);
      if (isSetCreditCardNumber())
        hashCode = hashCode * 8191 + creditCardNumber.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(joinCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUserEmail(), other.isSetUserEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEmail, other.userEmail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCourseId(), other.isSetCourseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseId, other.courseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCreditCardNumber(), other.isSetCreditCardNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreditCardNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditCardNumber, other.creditCardNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("joinCourse_args(");
      boolean first = true;

      sb.append("userEmail:");
      if (this.userEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.userEmail);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("courseId:");
      sb.append(this.courseId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("creditCardNumber:");
      if (this.creditCardNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.creditCardNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinCourse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public joinCourse_argsStandardScheme getScheme() {
        return new joinCourse_argsStandardScheme();
      }
    }

    private static class joinCourse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<joinCourse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, joinCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userEmail = iprot.readString();
                struct.setUserEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COURSE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.courseId = iprot.readI64();
                struct.setCourseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CREDIT_CARD_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.creditCardNumber = iprot.readString();
                struct.setCreditCardNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, joinCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userEmail != null) {
          oprot.writeFieldBegin(USER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.userEmail);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COURSE_ID_FIELD_DESC);
        oprot.writeI64(struct.courseId);
        oprot.writeFieldEnd();
        if (struct.creditCardNumber != null) {
          oprot.writeFieldBegin(CREDIT_CARD_NUMBER_FIELD_DESC);
          oprot.writeString(struct.creditCardNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinCourse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public joinCourse_argsTupleScheme getScheme() {
        return new joinCourse_argsTupleScheme();
      }
    }

    private static class joinCourse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<joinCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserEmail()) {
          optionals.set(0);
        }
        if (struct.isSetCourseId()) {
          optionals.set(1);
        }
        if (struct.isSetCreditCardNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserEmail()) {
          oprot.writeString(struct.userEmail);
        }
        if (struct.isSetCourseId()) {
          oprot.writeI64(struct.courseId);
        }
        if (struct.isSetCreditCardNumber()) {
          oprot.writeString(struct.creditCardNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userEmail = iprot.readString();
          struct.setUserEmailIsSet(true);
        }
        if (incoming.get(1)) {
          struct.courseId = iprot.readI64();
          struct.setCourseIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.creditCardNumber = iprot.readString();
          struct.setCreditCardNumberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class joinCourse_result implements org.apache.thrift.TBase<joinCourse_result, joinCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<joinCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("joinCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EE_FIELD_DESC = new org.apache.thrift.protocol.TField("ee", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eee", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField EEEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eeee", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField EEEEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eeeee", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinCourse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinCourse_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftInscriptionDto success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInputValidationException e; // required
    public @org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException ee; // required
    public @org.apache.thrift.annotation.Nullable ThriftNotEnoughPlacesException eee; // required
    public @org.apache.thrift.annotation.Nullable ThriftCourseAlreadyJoinedException eeee; // required
    public @org.apache.thrift.annotation.Nullable ThriftCourseAlreadyStartedException eeeee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e"),
      EE((short)2, "ee"),
      EEE((short)3, "eee"),
      EEEE((short)4, "eeee"),
      EEEEE((short)5, "eeeee");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          case 2: // EE
            return EE;
          case 3: // EEE
            return EEE;
          case 4: // EEEE
            return EEEE;
          case 5: // EEEEE
            return EEEEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInscriptionDto.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInputValidationException.class)));
      tmpMap.put(_Fields.EE, new org.apache.thrift.meta_data.FieldMetaData("ee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInstanceNotFoundException.class)));
      tmpMap.put(_Fields.EEE, new org.apache.thrift.meta_data.FieldMetaData("eee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftNotEnoughPlacesException.class)));
      tmpMap.put(_Fields.EEEE, new org.apache.thrift.meta_data.FieldMetaData("eeee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCourseAlreadyJoinedException.class)));
      tmpMap.put(_Fields.EEEEE, new org.apache.thrift.meta_data.FieldMetaData("eeeee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCourseAlreadyStartedException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinCourse_result.class, metaDataMap);
    }

    public joinCourse_result() {
    }

    public joinCourse_result(
      ThriftInscriptionDto success,
      ThriftInputValidationException e,
      ThriftInstanceNotFoundException ee,
      ThriftNotEnoughPlacesException eee,
      ThriftCourseAlreadyJoinedException eeee,
      ThriftCourseAlreadyStartedException eeeee)
    {
      this();
      this.success = success;
      this.e = e;
      this.ee = ee;
      this.eee = eee;
      this.eeee = eeee;
      this.eeeee = eeeee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public joinCourse_result(joinCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftInscriptionDto(other.success);
      }
      if (other.isSetE()) {
        this.e = new ThriftInputValidationException(other.e);
      }
      if (other.isSetEe()) {
        this.ee = new ThriftInstanceNotFoundException(other.ee);
      }
      if (other.isSetEee()) {
        this.eee = new ThriftNotEnoughPlacesException(other.eee);
      }
      if (other.isSetEeee()) {
        this.eeee = new ThriftCourseAlreadyJoinedException(other.eeee);
      }
      if (other.isSetEeeee()) {
        this.eeeee = new ThriftCourseAlreadyStartedException(other.eeeee);
      }
    }

    @Override
    public joinCourse_result deepCopy() {
      return new joinCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
      this.ee = null;
      this.eee = null;
      this.eeee = null;
      this.eeeee = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInscriptionDto getSuccess() {
      return this.success;
    }

    public joinCourse_result setSuccess(@org.apache.thrift.annotation.Nullable ThriftInscriptionDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInputValidationException getE() {
      return this.e;
    }

    public joinCourse_result setE(@org.apache.thrift.annotation.Nullable ThriftInputValidationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInstanceNotFoundException getEe() {
      return this.ee;
    }

    public joinCourse_result setEe(@org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException ee) {
      this.ee = ee;
      return this;
    }

    public void unsetEe() {
      this.ee = null;
    }

    /** Returns true if field ee is set (has been assigned a value) and false otherwise */
    public boolean isSetEe() {
      return this.ee != null;
    }

    public void setEeIsSet(boolean value) {
      if (!value) {
        this.ee = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftNotEnoughPlacesException getEee() {
      return this.eee;
    }

    public joinCourse_result setEee(@org.apache.thrift.annotation.Nullable ThriftNotEnoughPlacesException eee) {
      this.eee = eee;
      return this;
    }

    public void unsetEee() {
      this.eee = null;
    }

    /** Returns true if field eee is set (has been assigned a value) and false otherwise */
    public boolean isSetEee() {
      return this.eee != null;
    }

    public void setEeeIsSet(boolean value) {
      if (!value) {
        this.eee = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftCourseAlreadyJoinedException getEeee() {
      return this.eeee;
    }

    public joinCourse_result setEeee(@org.apache.thrift.annotation.Nullable ThriftCourseAlreadyJoinedException eeee) {
      this.eeee = eeee;
      return this;
    }

    public void unsetEeee() {
      this.eeee = null;
    }

    /** Returns true if field eeee is set (has been assigned a value) and false otherwise */
    public boolean isSetEeee() {
      return this.eeee != null;
    }

    public void setEeeeIsSet(boolean value) {
      if (!value) {
        this.eeee = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftCourseAlreadyStartedException getEeeee() {
      return this.eeeee;
    }

    public joinCourse_result setEeeee(@org.apache.thrift.annotation.Nullable ThriftCourseAlreadyStartedException eeeee) {
      this.eeeee = eeeee;
      return this;
    }

    public void unsetEeeee() {
      this.eeeee = null;
    }

    /** Returns true if field eeeee is set (has been assigned a value) and false otherwise */
    public boolean isSetEeeee() {
      return this.eeeee != null;
    }

    public void setEeeeeIsSet(boolean value) {
      if (!value) {
        this.eeeee = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftInscriptionDto)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInputValidationException)value);
        }
        break;

      case EE:
        if (value == null) {
          unsetEe();
        } else {
          setEe((ThriftInstanceNotFoundException)value);
        }
        break;

      case EEE:
        if (value == null) {
          unsetEee();
        } else {
          setEee((ThriftNotEnoughPlacesException)value);
        }
        break;

      case EEEE:
        if (value == null) {
          unsetEeee();
        } else {
          setEeee((ThriftCourseAlreadyJoinedException)value);
        }
        break;

      case EEEEE:
        if (value == null) {
          unsetEeeee();
        } else {
          setEeeee((ThriftCourseAlreadyStartedException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      case EE:
        return getEe();

      case EEE:
        return getEee();

      case EEEE:
        return getEeee();

      case EEEEE:
        return getEeeee();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      case EE:
        return isSetEe();
      case EEE:
        return isSetEee();
      case EEEE:
        return isSetEeee();
      case EEEEE:
        return isSetEeeee();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof joinCourse_result)
        return this.equals((joinCourse_result)that);
      return false;
    }

    public boolean equals(joinCourse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_ee = true && this.isSetEe();
      boolean that_present_ee = true && that.isSetEe();
      if (this_present_ee || that_present_ee) {
        if (!(this_present_ee && that_present_ee))
          return false;
        if (!this.ee.equals(that.ee))
          return false;
      }

      boolean this_present_eee = true && this.isSetEee();
      boolean that_present_eee = true && that.isSetEee();
      if (this_present_eee || that_present_eee) {
        if (!(this_present_eee && that_present_eee))
          return false;
        if (!this.eee.equals(that.eee))
          return false;
      }

      boolean this_present_eeee = true && this.isSetEeee();
      boolean that_present_eeee = true && that.isSetEeee();
      if (this_present_eeee || that_present_eeee) {
        if (!(this_present_eeee && that_present_eeee))
          return false;
        if (!this.eeee.equals(that.eeee))
          return false;
      }

      boolean this_present_eeeee = true && this.isSetEeeee();
      boolean that_present_eeeee = true && that.isSetEeeee();
      if (this_present_eeeee || that_present_eeeee) {
        if (!(this_present_eeeee && that_present_eeeee))
          return false;
        if (!this.eeeee.equals(that.eeeee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      hashCode = hashCode * 8191 + ((isSetEe()) ? 131071 : 524287);
      if (isSetEe())
        hashCode = hashCode * 8191 + ee.hashCode();

      hashCode = hashCode * 8191 + ((isSetEee()) ? 131071 : 524287);
      if (isSetEee())
        hashCode = hashCode * 8191 + eee.hashCode();

      hashCode = hashCode * 8191 + ((isSetEeee()) ? 131071 : 524287);
      if (isSetEeee())
        hashCode = hashCode * 8191 + eeee.hashCode();

      hashCode = hashCode * 8191 + ((isSetEeeee()) ? 131071 : 524287);
      if (isSetEeeee())
        hashCode = hashCode * 8191 + eeeee.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(joinCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEe(), other.isSetEe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ee, other.ee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEee(), other.isSetEee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eee, other.eee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEeee(), other.isSetEeee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEeee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eeee, other.eeee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEeeee(), other.isSetEeeee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEeeee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eeeee, other.eeeee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("joinCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ee:");
      if (this.ee == null) {
        sb.append("null");
      } else {
        sb.append(this.ee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eee:");
      if (this.eee == null) {
        sb.append("null");
      } else {
        sb.append(this.eee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eeee:");
      if (this.eeee == null) {
        sb.append("null");
      } else {
        sb.append(this.eeee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eeeee:");
      if (this.eeeee == null) {
        sb.append("null");
      } else {
        sb.append(this.eeeee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class joinCourse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public joinCourse_resultStandardScheme getScheme() {
        return new joinCourse_resultStandardScheme();
      }
    }

    private static class joinCourse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<joinCourse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, joinCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftInscriptionDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInputValidationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ee = new ThriftInstanceNotFoundException();
                struct.ee.read(iprot);
                struct.setEeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eee = new ThriftNotEnoughPlacesException();
                struct.eee.read(iprot);
                struct.setEeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EEEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eeee = new ThriftCourseAlreadyJoinedException();
                struct.eeee.read(iprot);
                struct.setEeeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EEEEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eeeee = new ThriftCourseAlreadyStartedException();
                struct.eeeee.read(iprot);
                struct.setEeeeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, joinCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ee != null) {
          oprot.writeFieldBegin(EE_FIELD_DESC);
          struct.ee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eee != null) {
          oprot.writeFieldBegin(EEE_FIELD_DESC);
          struct.eee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eeee != null) {
          oprot.writeFieldBegin(EEEE_FIELD_DESC);
          struct.eeee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eeeee != null) {
          oprot.writeFieldBegin(EEEEE_FIELD_DESC);
          struct.eeeee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class joinCourse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public joinCourse_resultTupleScheme getScheme() {
        return new joinCourse_resultTupleScheme();
      }
    }

    private static class joinCourse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<joinCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, joinCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        if (struct.isSetEe()) {
          optionals.set(2);
        }
        if (struct.isSetEee()) {
          optionals.set(3);
        }
        if (struct.isSetEeee()) {
          optionals.set(4);
        }
        if (struct.isSetEeeee()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
        if (struct.isSetEe()) {
          struct.ee.write(oprot);
        }
        if (struct.isSetEee()) {
          struct.eee.write(oprot);
        }
        if (struct.isSetEeee()) {
          struct.eeee.write(oprot);
        }
        if (struct.isSetEeeee()) {
          struct.eeeee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, joinCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = new ThriftInscriptionDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInputValidationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ee = new ThriftInstanceNotFoundException();
          struct.ee.read(iprot);
          struct.setEeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eee = new ThriftNotEnoughPlacesException();
          struct.eee.read(iprot);
          struct.setEeeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.eeee = new ThriftCourseAlreadyJoinedException();
          struct.eeee.read(iprot);
          struct.setEeeeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.eeeee = new ThriftCourseAlreadyStartedException();
          struct.eeeee.read(iprot);
          struct.setEeeeeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
